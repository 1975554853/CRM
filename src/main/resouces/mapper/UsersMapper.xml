<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.mapper.UsersMapper">
  <resultMap id="BaseResultMap" type="com.spring.pojo.Users">
    <id column="Id" jdbcType="VARCHAR" property="id" />
    <result column="LoginName" jdbcType="VARCHAR" property="loginname" />
    <result column="Password" jdbcType="VARCHAR" property="password" />
    <result column="IsLockout" jdbcType="CHAR" property="islockout" />
    <result column="LastLoginTime" jdbcType="TIMESTAMP" property="lastlogintime" />
    <result column="PsdWrongTime" jdbcType="INTEGER" property="psdwrongtime" />
    <result column="LockTime" jdbcType="TIMESTAMP" property="locktime" />
    <result column="ProtectEMail" jdbcType="VARCHAR" property="protectemail" />
    <result column="protectMTel" jdbcType="VARCHAR" property="protectmtel" />
    <result column="CreateTime" jdbcType="TIMESTAMP" property="createtime" />
  </resultMap>
  <sql id="Base_Column_List">
    Id, LoginName, Password, IsLockout, LastLoginTime, PsdWrongTime, LockTime, ProtectEMail, 
    protectMTel, CreateTime
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from users
    where Id = #{id,jdbcType=VARCHAR}
  </select>

  <select id="selectUserName" resultMap="BaseResultMap">
    select * from users where LoginName = #{userName};
  </select>

  <update id="updateUserPsdWrongTime">
    update users set IsLockout=#{IsLockout},PsdWrongTime=#{PsdWrongTime}
    <if test="IsLockout=='是'.toString()">,LockTime=now()</if>
    <if test="PsdWrongTime==0">,LastLoginTime=now()</if>
    where LoginName=#{userName}
  </update>

  <select id="selectUserPermission" resultType="java.lang.String">
    select permissionValue from permissiontb where permissionId in
    (select permissionId from rolepermissiontb where roleId in
    (select userroles.RoleId from userroles where UserId=#{userid}))
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from users
    where Id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.spring.pojo.Users">
    insert into users (Id, LoginName, Password, 
      IsLockout, LastLoginTime, PsdWrongTime, 
      LockTime, ProtectEMail, protectMTel, 
      CreateTime)
    values (#{id,jdbcType=VARCHAR}, #{loginname,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{islockout,jdbcType=CHAR}, #{lastlogintime,jdbcType=TIMESTAMP}, #{psdwrongtime,jdbcType=INTEGER}, 
      #{locktime,jdbcType=TIMESTAMP}, #{protectemail,jdbcType=VARCHAR}, #{protectmtel,jdbcType=VARCHAR}, 
      #{createtime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.spring.pojo.Users">
    insert into users
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        Id,
      </if>
      <if test="loginname != null">
        LoginName,
      </if>
      <if test="password != null">
        Password,
      </if>
      <if test="islockout != null">
        IsLockout,
      </if>
      <if test="lastlogintime != null">
        LastLoginTime,
      </if>
      <if test="psdwrongtime != null">
        PsdWrongTime,
      </if>
      <if test="locktime != null">
        LockTime,
      </if>
      <if test="protectemail != null">
        ProtectEMail,
      </if>
      <if test="protectmtel != null">
        protectMTel,
      </if>
      <if test="createtime != null">
        CreateTime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="loginname != null">
        #{loginname,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="islockout != null">
        #{islockout,jdbcType=CHAR},
      </if>
      <if test="lastlogintime != null">
        #{lastlogintime,jdbcType=TIMESTAMP},
      </if>
      <if test="psdwrongtime != null">
        #{psdwrongtime,jdbcType=INTEGER},
      </if>
      <if test="locktime != null">
        #{locktime,jdbcType=TIMESTAMP},
      </if>
      <if test="protectemail != null">
        #{protectemail,jdbcType=VARCHAR},
      </if>
      <if test="protectmtel != null">
        #{protectmtel,jdbcType=VARCHAR},
      </if>
      <if test="createtime != null">
        #{createtime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.spring.pojo.Users">
    update users
    <set>
      <if test="loginname != null">
        LoginName = #{loginname,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        Password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="islockout != null">
        IsLockout = #{islockout,jdbcType=CHAR},
      </if>
      <if test="lastlogintime != null">
        LastLoginTime = #{lastlogintime,jdbcType=TIMESTAMP},
      </if>
      <if test="psdwrongtime != null">
        PsdWrongTime = #{psdwrongtime,jdbcType=INTEGER},
      </if>
      <if test="locktime != null">
        LockTime = #{locktime,jdbcType=TIMESTAMP},
      </if>
      <if test="protectemail != null">
        ProtectEMail = #{protectemail,jdbcType=VARCHAR},
      </if>
      <if test="protectmtel != null">
        protectMTel = #{protectmtel,jdbcType=VARCHAR},
      </if>
      <if test="createtime != null">
        CreateTime = #{createtime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where Id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.spring.pojo.Users">
    update users
    set LoginName = #{loginname,jdbcType=VARCHAR},
      Password = #{password,jdbcType=VARCHAR},
      IsLockout = #{islockout,jdbcType=CHAR},
      LastLoginTime = #{lastlogintime,jdbcType=TIMESTAMP},
      PsdWrongTime = #{psdwrongtime,jdbcType=INTEGER},
      LockTime = #{locktime,jdbcType=TIMESTAMP},
      ProtectEMail = #{protectemail,jdbcType=VARCHAR},
      protectMTel = #{protectmtel,jdbcType=VARCHAR},
      CreateTime = #{createtime,jdbcType=TIMESTAMP}
    where Id = #{id,jdbcType=VARCHAR}
  </update>

  <select id="selectUsersCondition" resultMap="BaseResultMap">
        select * from users where 1=1
      <if test="loginname!=null">and LoginName=#{loginname}</if>
    <if test="starttime!=null">and CreateTime &gt;= #{starttime}</if>
    <if test="endtime!=null">and CreateTime &lt;= #{endtime}</if>
    <if test="islockout!=null">and IsLockout=#{islockout}</if>
    <if test="sort!=null">order by #{sort}</if>
  </select>

    <select id="selectUsersLoginname" resultMap="BaseResultMap">
        select * from users where  LoginName=#{loginname}
    </select>

    <select id="selectAllUser" resultMap="BaseResultMap">
        select * from users
    </select>

    <insert id="insertUsers" parameterType="com.spring.pojo.Users">
        insert into users values
        (#{id}, #{loginname}, #{password},"否", now(), 0,null, #{protectemail}, #{protectmtel}, now())
    </insert>

  <delete id="deleteUserRolesId">
  delete from userroles where UserId=#{id}
  </delete>
    <delete id="deleteUsersLoginname">
        delete from users where LoginName=#{loginname}
    </delete>

    <update id="updateUsers">
        update users set
        <if test="protectemail!=null">ProtectEMail = #{protectemail}</if>
        <if test="protectemail!=null">
            <if test="protectmtel!=null">,</if>
        </if>
        <if test="protectmtel!=null">protectMTel = #{protectmtel}</if>
        where LoginName=#{loginname}
    </update>

    <update id="updateUsersPassword">
        update users set Password=#{Password} where LoginName=#{loginname}
    </update>

    <update id="IsLockoutUsers">
        update users set IsLockout=#{IsLockout}
      <if test="IsLockout=='否'.toString()">,PsdWrongTime=0</if>
        <if test="IsLockout=='是'.toString()">,LockTime=now()</if>
         where LoginName=#{loginname}
    </update>

  <select id="selectRoles" resultType="java.lang.String">
    select  Name from roles
  </select>
  <select id="selectUserRoles" resultType="java.lang.String">
    select  Name from roles where Id in(
    select RoleId from userroles where UserId =(
    select users.Id from users where LoginName=#{loginname}
    ))
  </select>
  <insert id="insertUserRole">
    insert into userroles values(#{id},
    (select Id from users where LoginName=#{loginname}),
    (select Id from roles where Name=#{rolename}))
  </insert>
  <delete id="deleteUserRole">
    delete from userroles where
    UserId=(select Id from users where LoginName=#{loginname}) and
    RoleId=(select Id from roles where Name=#{rolename})
  </delete>

  <!--日志-->
  <insert id="insertlogmessage" parameterType="com.spring.pojo.Systemlogmessage">
    insert into systemlogmessage values
         (null,#{systemLogMessage_Name},#{systemLogMessage_Roles},#{systemLogMessag_Method},#{systemLogMessage_Description},
         #{systemLogMessage_Params},#{systemLogMessage_StartTime},#{systemLogMessage_Time},#{systemLogMessage_Successful},#{systemLogMessage_Exception})
    </insert>

</mapper>